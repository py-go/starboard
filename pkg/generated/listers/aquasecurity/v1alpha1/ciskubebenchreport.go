// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/danielpacak/kube-security-manager/pkg/apis/aquasecurity/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CISKubeBenchReportLister helps list CISKubeBenchReports.
// All objects returned here must be treated as read-only.
type CISKubeBenchReportLister interface {
	// List lists all CISKubeBenchReports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CISKubeBenchReport, err error)
	// Get retrieves the CISKubeBenchReport from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CISKubeBenchReport, error)
	CISKubeBenchReportListerExpansion
}

// cISKubeBenchReportLister implements the CISKubeBenchReportLister interface.
type cISKubeBenchReportLister struct {
	indexer cache.Indexer
}

// NewCISKubeBenchReportLister returns a new CISKubeBenchReportLister.
func NewCISKubeBenchReportLister(indexer cache.Indexer) CISKubeBenchReportLister {
	return &cISKubeBenchReportLister{indexer: indexer}
}

// List lists all CISKubeBenchReports in the indexer.
func (s *cISKubeBenchReportLister) List(selector labels.Selector) (ret []*v1alpha1.CISKubeBenchReport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CISKubeBenchReport))
	})
	return ret, err
}

// Get retrieves the CISKubeBenchReport from the index for a given name.
func (s *cISKubeBenchReportLister) Get(name string) (*v1alpha1.CISKubeBenchReport, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ciskubebenchreport"), name)
	}
	return obj.(*v1alpha1.CISKubeBenchReport), nil
}
