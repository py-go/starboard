package vulnerabilityreport_test

import (
	"context"
	"testing"

	"github.com/danielpacak/kube-security-manager/pkg/apis/aquasecurity/v1alpha1"
	"github.com/danielpacak/kube-security-manager/pkg/kube"
	"github.com/danielpacak/kube-security-manager/pkg/starboard"
	"github.com/danielpacak/kube-security-manager/pkg/vulnerabilityreport"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client/fake"
)

func TestNewReadWriter(t *testing.T) {

	kubernetesScheme := starboard.NewScheme()

	t.Run("Should create VulnerabilityReports", func(t *testing.T) {
		client := fake.NewClientBuilder().WithScheme(kubernetesScheme).Build()
		readWriter := vulnerabilityreport.NewReadWriter(client)
		err := readWriter.Write(context.TODO(), []v1alpha1.VulnerabilityReport{
			{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "deployment-app1-container1",
					Namespace: "qa",
					Labels: map[string]string{
						starboard.LabelResourceKind:      "Deployment",
						starboard.LabelResourceName:      "app1",
						starboard.LabelResourceNamespace: "qa",
						starboard.LabelContainerName:     "container1",
						starboard.LabelResourceSpecHash:  "h1",
					},
				},
			},
			{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "deployment-app1-container2",
					Namespace: "qa",
					Labels: map[string]string{
						starboard.LabelResourceKind:      "Deployment",
						starboard.LabelResourceName:      "app1",
						starboard.LabelResourceNamespace: "qa",
						starboard.LabelContainerName:     "container2",
						starboard.LabelResourceSpecHash:  "h1",
					},
				},
			},
		})
		require.NoError(t, err)
		var list v1alpha1.VulnerabilityReportList
		err = client.List(context.TODO(), &list)
		require.NoError(t, err)
		reports := map[string]v1alpha1.VulnerabilityReport{}
		for _, item := range list.Items {
			reports[item.Name] = item
		}
		assert.Equal(t, map[string]v1alpha1.VulnerabilityReport{
			"deployment-app1-container1": {
				ObjectMeta: metav1.ObjectMeta{
					Namespace: "qa",
					Name:      "deployment-app1-container1",
					Labels: map[string]string{
						starboard.LabelResourceKind:      "Deployment",
						starboard.LabelResourceName:      "app1",
						starboard.LabelResourceNamespace: "qa",
						starboard.LabelContainerName:     "container1",
						starboard.LabelResourceSpecHash:  "h1",
					},
					ResourceVersion: "1",
				},
			},
			"deployment-app1-container2": {
				ObjectMeta: metav1.ObjectMeta{
					Namespace: "qa",
					Name:      "deployment-app1-container2",
					Labels: map[string]string{
						starboard.LabelResourceKind:      "Deployment",
						starboard.LabelResourceName:      "app1",
						starboard.LabelResourceNamespace: "qa",
						starboard.LabelContainerName:     "container2",
						starboard.LabelResourceSpecHash:  "h1",
					},
					ResourceVersion: "1",
				},
			},
		}, reports)
	})

	t.Run("Should update VulnerabilityReports", func(t *testing.T) {
		client := fake.NewClientBuilder().WithScheme(kubernetesScheme).WithObjects(
			&v1alpha1.VulnerabilityReport{
				ObjectMeta: metav1.ObjectMeta{
					Name:            "deployment-app1-container1",
					Namespace:       "qa",
					ResourceVersion: "0",
					Labels: map[string]string{
						starboard.LabelResourceKind:      "Deployment",
						starboard.LabelResourceName:      "app1",
						starboard.LabelResourceNamespace: "qa",
						starboard.LabelContainerName:     "container1",
						starboard.LabelResourceSpecHash:  "h1",
					},
				},
			},
			&v1alpha1.VulnerabilityReport{
				ObjectMeta: metav1.ObjectMeta{
					Name:            "deployment-app1-container2",
					Namespace:       "qa",
					ResourceVersion: "0",
					Labels: map[string]string{
						starboard.LabelResourceKind:      "Deployment",
						starboard.LabelResourceName:      "app1",
						starboard.LabelResourceNamespace: "qa",
						starboard.LabelContainerName:     "container2",
						starboard.LabelResourceSpecHash:  "h2",
					},
				},
			}).Build()
		readWriter := vulnerabilityreport.NewReadWriter(client)
		err := readWriter.Write(context.TODO(), []v1alpha1.VulnerabilityReport{
			{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "deployment-app1-container1",
					Namespace: "qa",
					Labels: map[string]string{
						starboard.LabelResourceKind:      "Deployment",
						starboard.LabelResourceName:      "app1",
						starboard.LabelResourceNamespace: "qa",
						starboard.LabelContainerName:     "container1",
						starboard.LabelResourceSpecHash:  "h2",
					},
				},
			},
			{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "deployment-app1-container2",
					Namespace: "qa",
					Labels: map[string]string{
						starboard.LabelResourceKind:      "Deployment",
						starboard.LabelResourceName:      "app1",
						starboard.LabelResourceNamespace: "qa",
						starboard.LabelContainerName:     "container2",
						starboard.LabelResourceSpecHash:  "h2",
					},
				},
			},
		})
		require.NoError(t, err)

		var found v1alpha1.VulnerabilityReport
		err = client.Get(context.TODO(), types.NamespacedName{
			Namespace: "qa",
			Name:      "deployment-app1-container1",
		}, &found)
		require.NoError(t, err)
		assert.Equal(t, v1alpha1.VulnerabilityReport{
			TypeMeta: metav1.TypeMeta{
				APIVersion: "aquasecurity.github.io/v1alpha1",
				Kind:       "VulnerabilityReport",
			},
			ObjectMeta: metav1.ObjectMeta{
				ResourceVersion: "1",
				Name:            "deployment-app1-container1",
				Namespace:       "qa",
				Labels: map[string]string{
					starboard.LabelResourceKind:      "Deployment",
					starboard.LabelResourceName:      "app1",
					starboard.LabelResourceNamespace: "qa",
					starboard.LabelContainerName:     "container1",
					starboard.LabelResourceSpecHash:  "h2",
				},
			},
		}, found)

		err = client.Get(context.TODO(), types.NamespacedName{
			Namespace: "qa",
			Name:      "deployment-app1-container2",
		}, &found)
		require.NoError(t, err)
		assert.Equal(t, v1alpha1.VulnerabilityReport{
			TypeMeta: metav1.TypeMeta{
				APIVersion: "aquasecurity.github.io/v1alpha1",
				Kind:       "VulnerabilityReport",
			},
			ObjectMeta: metav1.ObjectMeta{
				ResourceVersion: "1",
				Name:            "deployment-app1-container2",
				Namespace:       "qa",
				Labels: map[string]string{
					starboard.LabelResourceKind:      "Deployment",
					starboard.LabelResourceName:      "app1",
					starboard.LabelResourceNamespace: "qa",
					starboard.LabelContainerName:     "container2",
					starboard.LabelResourceSpecHash:  "h2",
				},
			},
		}, found)
	})

	t.Run("Should find VulnerabilityReports", func(t *testing.T) {
		client := fake.NewClientBuilder().WithScheme(kubernetesScheme).WithObjects(&v1alpha1.VulnerabilityReport{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: "my-namespace",
				Name:      "deployment-my-deploy-my-container-01",
				Labels: map[string]string{
					starboard.LabelResourceKind:      string(kube.KindDeployment),
					starboard.LabelResourceName:      "my-deploy",
					starboard.LabelResourceNamespace: "my-namespace",
					starboard.LabelContainerName:     "my-container-01",
				},
			},
			Report: v1alpha1.VulnerabilityReportData{},
		}, &v1alpha1.VulnerabilityReport{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: "my-namespace",
				Name:      "deployment-my-deploy-my-container-02",
				Labels: map[string]string{
					starboard.LabelResourceKind:      string(kube.KindDeployment),
					starboard.LabelResourceName:      "my-deploy",
					starboard.LabelResourceNamespace: "my-namespace",
					starboard.LabelContainerName:     "my-container-02",
				},
			},
			Report: v1alpha1.VulnerabilityReportData{},
		}, &v1alpha1.VulnerabilityReport{
			ObjectMeta: metav1.ObjectMeta{
				Namespace: "my-namespace",
				Name:      "my-sts",
				Labels: map[string]string{
					starboard.LabelResourceKind:      string(kube.KindStatefulSet),
					starboard.LabelResourceName:      "my-sts",
					starboard.LabelResourceNamespace: "my-namespace",
					starboard.LabelContainerName:     "my-sts-container",
				},
			},
			Report: v1alpha1.VulnerabilityReportData{},
		}).Build()

		readWriter := vulnerabilityreport.NewReadWriter(client)
		list, err := readWriter.FindByOwner(context.TODO(), kube.ObjectRef{
			Kind:      kube.KindDeployment,
			Name:      "my-deploy",
			Namespace: "my-namespace",
		})
		require.NoError(t, err)
		reports := map[string]bool{}
		for _, item := range list {
			reports[item.Name] = true
		}
		assert.Equal(t, map[string]bool{
			"deployment-my-deploy-my-container-01": true,
			"deployment-my-deploy-my-container-02": true,
		}, reports)
	})

}
